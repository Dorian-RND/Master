-----------------
-- les opérations

data Op = Add | Sub | Mul | Div

instance Show Op where
    show Add = " + "
    show Sub = " - "
    show Mul = " * "
    show Div = " / "

valid :: Op -> Int -> Int -> Bool
valid Add _ _ = True
valid Sub x y = x > y
valid Mul _ _ = True
valid Div x y = x `mod` y == 0

apply :: Op -> Int -> Int -> Int
apply Add x y = x + y
apply Sub x y = x - y
apply Mul x y = x * y
apply Div x y = x `div` y

-----------------------------
-- les expressions numériques

data Expr = Val Int | App Op Expr Expr

instance Show Expr where
    show (Val x) = show x
    show (App o l r) = brak l ++ show o ++ brak r
                       where brak (Val n) = show n
                             brak e = "(" ++ show e ++ ")"

values :: Expr -> [Int]
values (Val x) = [x]
values (App _ l r) = values l ++ values r

eval :: Expr -> [Int]
eval (Val x) = [x | x > 0]
eval (App o l r) = [apply o x y | x <- eval l, y <- eval r, valid o x y]

------------------------------
-- les fonctions combinatoires

subs :: [a] -> [[a]]
subs [] = [[]]
subs (x:xs) = map (x:) (subs xs) ++ subs xs

interleave :: a -> [a] -> [[a]]
interleave x [] = [[x]]
interleave x (y:ys) = (x:y:ys) : map (y:) (interleave x ys)

-- Autre écriture :
-- interleave x ys = [ take n ys ++ [x] ++ drop n ys |  n <- [0..l]]
--    where l = length ys

perms :: [a] -> [[a]]
perms [] = [[]]
perms (x:xs) = concat [ interleave x ys | ys <- perms xs ]

-- Autre écriture :
-- perms (x:xs) = concat (map (interleave x) (perms xs))

choices :: [a] -> [[a]]
choices xs = [z | ys <- subs xs, z <- perms ys ]

-- Deux autres manières décrire la fonction 'choices' :
-- choices xs = concat (map perms (subs xs))
-- choices = concatMap perms . subs

-- la fonction testant si une expression mène à la solution

solution :: Expr -> [Int] -> Int -> Bool
solution e ns n = elem (values e) (choices ns) && (eval e) == [n]

-- e = App Mul (App Add (Val 1) (Val 50)) (App Sub (Val 25) (Val 10))

----------------------------
-- Solutions par force brute

split :: [a] -> [([a],[a])]
split [] = []
split [x] = []
split (x : xs) = ([x], xs) : [(x : a, b) | (a,b) <- split xs]

-- split xs = [(take n xs, drop n xs) | n <- [1..l]]
--    where l = (length xs) - 1

-- split xs = [splitAt i xs | i <- [1..l]]
--    where l = (length xs) - 1

ops :: [Op]
ops = [Add, Sub, Mul, Div]

combine :: Expr -> Expr -> [Expr]
combine l r = [ App op l r |  op <- ops]

exprs :: [Int] -> [Expr]
exprs [] = []
exprs [n] = [Val n]
exprs ns = [ e | (ls, rs) <- split ns,
                  l       <- exprs ls,
                  r       <- exprs rs,
                  e       <- combine l r ]

solutions :: [Int] -> Int -> [Expr]
solutions ns n = [ e | ns' <- choices ns, e <- exprs ns', eval e == [n]]

-- Remarque sur la fonction solutions : on n'utilise pas la fonction 'solution'
-- écrite précédemment car ici on sait que 'choices' ne génèrent que des listes valides
-- donc on peut évaluer directement l'expression e

-- Pour afficher les 780 solutions ligne par ligne de l'exemple
printsol [] = return ()
printsol (x:xs) = do print x
                     printsol xs


main = printsol $ solutions [1,3,7,10,25,50] 765

-- La version compilée est bien sûr plus rapide que la version interprétée